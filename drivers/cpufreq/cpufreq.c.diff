--- cpufreq.c.ori	2012-01-06 14:08:36.000000000 -0300
+++ cpufreq.c	2012-01-08 19:05:54.000000000 -0300
@@ -28,6 +28,7 @@
 #include <linux/cpu.h>
 #include <linux/completion.h>
 #include <linux/mutex.h>
+#include <linux/sched.h>
 #include <linux/syscore_ops.h>
 
 #include <trace/events/power.h>
@@ -553,6 +554,20 @@ static ssize_t show_scaling_setspeed(str
 	return policy->governor->show_setspeed(policy, buf);
 }
 
+#ifdef CONFIG_CUSTOM_VOLTAGE
+extern ssize_t customvoltage_armvolt_read(struct device * dev, struct device_attribute * attr, char * buf);
+extern ssize_t customvoltage_armvolt_write(struct device * dev, struct device_attribute * attr, const char * buf, size_t size);
+
+static ssize_t show_UV_mV_table(struct cpufreq_policy *policy, char *buf) {
+	return customvoltage_armvolt_read(NULL, NULL, buf);
+}
+
+static ssize_t store_UV_mV_table(struct cpufreq_policy *policy,
+					const char *buf, size_t count) {
+	return customvoltage_armvolt_write(NULL, NULL, buf, count);
+}
+#endif
+
 /**
  * show_scaling_driver - show the current cpufreq HW/BIOS limitation
  */
@@ -582,6 +597,9 @@ cpufreq_freq_attr_rw(scaling_min_freq);
 cpufreq_freq_attr_rw(scaling_max_freq);
 cpufreq_freq_attr_rw(scaling_governor);
 cpufreq_freq_attr_rw(scaling_setspeed);
+#ifdef CONFIG_CUSTOM_VOLTAGE
+cpufreq_freq_attr_rw(UV_mV_table);
+#endif
 
 static struct attribute *default_attrs[] = {
 	&cpuinfo_min_freq.attr,
@@ -595,6 +613,9 @@ static struct attribute *default_attrs[]
 	&scaling_driver.attr,
 	&scaling_available_governors.attr,
 	&scaling_setspeed.attr,
+#ifdef CONFIG_CUSTOM_VOLTAGE
+	&UV_mV_table.attr,
+#endif
 	NULL
 };
 
@@ -1424,6 +1445,18 @@ int __cpufreq_driver_target(struct cpufr
 		target_freq, relation);
 	if (cpu_online(policy->cpu) && cpufreq_driver->target)
 		retval = cpufreq_driver->target(policy, target_freq, relation);
+    
+    if (likely(retval != -EINVAL)) {
+      
+        if (target_freq == policy->max)
+            	
+                 cpu_nonscaling(policy->cpu);
+        	
+           else
+            	
+                  cpu_scaling(policy->cpu);
+        	
+          }
 
 	return retval;
 }
